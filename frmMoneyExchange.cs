using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Net;
using System.Xml;
using System.Net.NetworkInformation;
//=====================================================================================
// Leandro Fortunato - Money Exchange
//=====================================================================================
namespace DashBoard

{

    public partial class frmMoneyExchange : Form
    {


        public frmMoneyExchange()
        {
            InitializeComponent();
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            byte Option = 0;
            Option = Convert.ToByte(MessageBox.Show("Do you want to quit?", "Exit", MessageBoxButtons.YesNo, MessageBoxIcon.Question));
            if (Option == 6) { this.Close(); }
        }
        
        private void btnConvert_Click(object sender, EventArgs e)
        {
            labelMsg.Text = "";
            txtOutput.Text = "";

            MoneyExchange MoneyEx = new MoneyExchange();
            HistoryGen Historic = new HistoryGen(Application.StartupPath);
            if ((txtInput.Text.Length > 0) && (labelFrom.Text !="") && (labelTo.Text !="") )    // Only take an action if the txtInput is not empt
            {
                if((labelFrom.Text == labelTo.Text))
                {
                    txtOutput.Text = txtInput.Text;
                    return;
                }
                decimal inputValue = 0;
                try
                {
                    inputValue = Convert.ToDecimal(txtInput.Text);  // Convert to decimal the value entered by user
                    txtOutput.Text = MoneyEx.CurrencyConversion(inputValue, labelFrom.Text, labelTo.Text);
                    labelMsg.Text = MoneyEx.SourceLastConversion;

                    // Add the string log generated by the MeneyEx object to the historic file
                    Historic.UpdateLog("MoneyExchange.txt", MoneyEx.MsgLog);

                }
                catch (Exception ex1)
                {
                    MessageBox.Show("Invalid Currency Format\n" + ex1.Message, "Input Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    txtInput.Text = "";
                    return;
                }


            }
        }

        private void btnReadFile_Click(object sender, EventArgs e)
        {
            HistoryGen Historic = new HistoryGen(Application.StartupPath);
            string MoneyExchangeLog=Historic.ReadLog("MoneyExchange.txt");
            frmLog formLog = new frmLog(MoneyExchangeLog,"MoneyExchangeLog");
            formLog.ShowDialog();
        }

        private void frmMoneyExchange_Load(object sender, EventArgs e)
        {
            List<string> currencies = new List<string>() { "AUD", "BRL", "CAD", "EUR", "GBP", "INR", "JPY", "MXN", "USD" };
            ImageList il = new ImageList();
            foreach (string img in currencies)
            {
                Bitmap bmp = new Bitmap(Image.FromFile(Application.StartupPath + "\\Files\\" + img + ".png"));
                il.Images.Add(bmp);
            }
            il.ImageSize = new Size(24, 24);
            int count = 0;
            listViewFrom.SmallImageList = il;
            listViewTo.SmallImageList = il;
            foreach (string s in currencies)
            {
                ListViewItem lst = new ListViewItem();
                ListViewItem nlst = new ListViewItem();
                lst.Text = s;
                lst.ImageIndex = count;
                nlst.Text = s;
                nlst.ImageIndex = count++;
                listViewFrom.Items.Add(lst);
                listViewTo.Items.Add(nlst);
            }
        }

        private void listViewFrom_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listViewFrom.SelectedIndices.Count <= 0)
            {
                return;
            }
            int intselectedindex = listViewFrom.SelectedIndices[0];
            if (intselectedindex >= 0)
            {
                labelFrom.Text = listViewFrom.Items[intselectedindex].Text;
            }
        }

        private void listViewTo_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listViewTo.SelectedIndices.Count <= 0)
            {
                return;
            }
            int intselectedindex = listViewTo.SelectedIndices[0];
            if (intselectedindex >= 0)
            {
                labelTo.Text =listViewTo.Items[intselectedindex].Text;
                txtOutput.Text = "";
            }
        }
    }

    //This class perform the conversion of five different currencies CAD,USD,EUR,GBP and BRL
    public class MoneyExchange
    {
        string sourceLastConversion = "";
        string xmlFilePath = Application.StartupPath + @"\ExchangeRates.xml";
        string strConvLog;

        public string MsgLog {get { return strConvLog; }}

        public string SourceLastConversion { get => sourceLastConversion; }

        public string CurrencyConversion(decimal amount, string fromCurrency, string toCurrency)
        {
            decimal exchangeRate = 0;
             //
            if(HasAccessToInternet()==false)
            {
                exchangeRate = GetFromPreviousConversion(fromCurrency, toCurrency);
            }
            else
            {
                // Construct URL to query the Rate-exchange API
                const string urlPattern = "http://rate-exchange-1.appspot.com/currency?from={0}&to={1}";
                string url = string.Format(urlPattern, fromCurrency, toCurrency);

                // Get response as string
                string response = new WebClient().DownloadString(url);
                if (response.Length > 0)
                {
                    string[] fields = response.Split(',');

                
                    // Convert string to number
                    try
                    {
                        exchangeRate = decimal.Parse(fields[1].Substring(9), System.Globalization.CultureInfo.InvariantCulture);
                        SaveUpdatedConversionRate(fromCurrency, toCurrency, exchangeRate);
                    }
                    catch (Exception ex1)
                    {
                        MessageBox.Show("Error getting updated value from WEB\n" + ex1.Message, "Error Updating values", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                
            }

            DateTime dt = DateTime.Now;   //Get current date and time of the conversion
            decimal ConvCurr = (amount * exchangeRate);  // perform conversion 
            //Generate the Log file
            strConvLog = amount.ToString("F2") +" "+ fromCurrency +" = " + ConvCurr.ToString("F2") + " " + toCurrency +"\t" + dt.ToString();
            return ConvCurr.ToString("F2");
        }

        private void SaveUpdatedConversionRate(string fromCurrency , string toCurrency, decimal exchangeRate)
        {

            if (!File.Exists(xmlFilePath)) // If the file doesn't exists yet create it 
            {
                // The file doesnt exists yet. 
                //So create the file
                CreateXMLFXFile();
            }
           XmlDocument doc = new XmlDocument();
           doc.Load(xmlFilePath);
           XmlNode node = doc.SelectSingleNode("ExchangeRates/" + fromCurrency+toCurrency); // [index of user node]
           node.InnerText = exchangeRate.ToString("000.0000");

           node = doc.SelectSingleNode("ExchangeRates/" + fromCurrency + toCurrency+"DATE"); // [index of user node]
           node.InnerText = DateTime.Now.ToShortDateString();
           doc.Save(xmlFilePath);
           sourceLastConversion = "Exchange Rate Got Online " + DateTime.Now.ToShortDateString();
        }

        private decimal GetFromPreviousConversion(string fromCurrency, string toCurrency)
        {
            decimal exchangeRate = 0;
            if (!File.Exists(xmlFilePath)) // If the file doesn't exists yet create it 
            {
                // The file does not exists yet. 
                //So create the file
                CreateXMLFXFile();
            }
            XmlDocument doc = new XmlDocument();
            doc.Load(xmlFilePath);
            XmlNode node = doc.SelectSingleNode("ExchangeRates/" + fromCurrency + toCurrency); // [index of user node]
            exchangeRate= Convert.ToDecimal(node.InnerText);
            node = doc.SelectSingleNode("ExchangeRates/" + fromCurrency + toCurrency+"DATE");
            sourceLastConversion = "Exchange Rate got from file, last online update was in: " + node.InnerText;

            return exchangeRate;
        }

        private void CreateXMLFXFile()
        {
            // The file doesnt exists yet. 
            //So create the file
            // create the XmlWriterSettings object
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            settings.IndentChars = (" ");
            // create the XmlWriter object
            XmlWriter xmlOut = XmlWriter.Create(xmlFilePath, settings);
            // write the start of the document
            xmlOut.WriteStartDocument();
            xmlOut.WriteStartElement("ExchangeRates");
            {
                // "AUD", "BRL", "CAD", "EUR", "GBP", "INR", "JPY", "MXN", "USD" 
                xmlOut.WriteElementString("AUDBRL", "2.73");
                xmlOut.WriteElementString("AUDBRLDATE", "2018/12/30");

                xmlOut.WriteElementString("AUDCAD", "0.96");
                xmlOut.WriteElementString("AUDCADDATE", "2018/12/30");

                xmlOut.WriteElementString("AUDEUR", "0.62");
                xmlOut.WriteElementString("AUDCADEURDATE", "2018/12/30");

                xmlOut.WriteElementString("AUDGBP", "0.55");
                xmlOut.WriteElementString("AUDGBPDATE", "2018/12/30");

                xmlOut.WriteElementString("AUDINR", "49.23");
                xmlOut.WriteElementString("AUDINRDATE", "2018/12/30");

                xmlOut.WriteElementString("AUDJPY", "77.69");
                xmlOut.WriteElementString("AUDJPY", "2018/12/30");

                xmlOut.WriteElementString("AUDMXN", "13.84");
                xmlOut.WriteElementString("AUDMXNDATE", "2018/12/30");

                xmlOut.WriteElementString("AUDUSD", "0.70");
                xmlOut.WriteElementString("AUDUSDDATE", "2018/12/30");

                //=================================================================
                xmlOut.WriteElementString("BRLAUD", "0.37");
                xmlOut.WriteElementString("BRLAUDDATE", "2018/12/30");

                xmlOut.WriteElementString("BRLCAD", "0.35");
                xmlOut.WriteElementString("BRLCADDATE", "2018/12/30");

                xmlOut.WriteElementString("BRLEUR", "0.23");
                xmlOut.WriteElementString("BRLEURDATE", "2018/12/30");

                xmlOut.WriteElementString("BRLGBP", "0.20");
                xmlOut.WriteElementString("BRLGBPDATE", "2018/12/30");

                xmlOut.WriteElementString("BRLINR", "18.05");
                xmlOut.WriteElementString("BRLINRDATE", "2018/12/30");

                xmlOut.WriteElementString("BRLJPY", "28.48");
                xmlOut.WriteElementString("BRLJPYDATE", "2018/12/30");

                xmlOut.WriteElementString("BRLMXN", "5.07");
                xmlOut.WriteElementString("BRLMXNDATE", "2018/12/30"); ;

                xmlOut.WriteElementString("BRLUSD", "0.26");
                xmlOut.WriteElementString("BRLUSDDATE", "2018/12/30");


                //=================================================================
                xmlOut.WriteElementString("CADAUD", "1.04");
                xmlOut.WriteElementString("CADAUDDATE", "2018/12/30");

                xmlOut.WriteElementString("CADBRL", "2.84");
                xmlOut.WriteElementString("CADBRLDATE", "2018/12/30"); 

                xmlOut.WriteElementString("CADEUR", "0.64");
                xmlOut.WriteElementString("CADEURDDATE", "2018/12/30");

                xmlOut.WriteElementString("CADGBP", "0.57");
                xmlOut.WriteElementString("CADGBPDATE", "2018/12/30");

                xmlOut.WriteElementString("CADINR", "51.28");
                xmlOut.WriteElementString("CADINRDATE", "2018/12/30");

                xmlOut.WriteElementString("CADJPY", "80.92");
                xmlOut.WriteElementString("CADJPYDATE", "2018/12/30");

                xmlOut.WriteElementString("CADMXN", "14.42");
                xmlOut.WriteElementString("CADMXNDATE", "2018/12/30");

                xmlOut.WriteElementString("CADUSD", "0.73");
                xmlOut.WriteElementString("CADUSDDATE", "2018/12/30");


                //=================================================================
                xmlOut.WriteElementString("EURAUD", "1.62");
                xmlOut.WriteElementString("EURAUDDATE", "2018/12/30");

                xmlOut.WriteElementString("EURBRL", "4.43");
                xmlOut.WriteElementString("EURBRLDATE", "2018/12/30");

                xmlOut.WriteElementString("EURCAD", "1.56");
                xmlOut.WriteElementString("EURCADDATE", "2018/12/30");

                xmlOut.WriteElementString("EURGBP", "0.90");
                xmlOut.WriteElementString("EURGBPDATE", "2018/12/30");

                xmlOut.WriteElementString("EURINR", "79.97");
                xmlOut.WriteElementString("EURINRDATE", "2018/12/30");

                xmlOut.WriteElementString("EURJPY", "126.19");
                xmlOut.WriteElementString("EURJPYDATE", "2018/12/30");

                xmlOut.WriteElementString("EURMXN", "22.48");
                xmlOut.WriteElementString("EURMXNDATE", "2018/12/30");

                xmlOut.WriteElementString("EURUSD", "1.14");
                xmlOut.WriteElementString("EURUSDDATE", "2018/12/30");



                //=================================================================
                xmlOut.WriteElementString("GBPAUD", "1.80");
                xmlOut.WriteElementString("GBPAUDDATE", "2018/12/30");

                xmlOut.WriteElementString("GBPBRL", "4.92");
                xmlOut.WriteElementString("GBPBRLDATE", "2018/12/30");

                xmlOut.WriteElementString("GBPCAD", "1.73");
                xmlOut.WriteElementString("GBPCADDATE", "2018/12/30");

                xmlOut.WriteElementString("GBPEUR", "1.11");
                xmlOut.WriteElementString("GBPEURDATE", "2018/12/30");

                xmlOut.WriteElementString("GBPINR", "88.79");
                xmlOut.WriteElementString("GBPINRDATE", "2018/12/30");

                xmlOut.WriteElementString("GBPJPY", "140.10");
                xmlOut.WriteElementString("GBPJPYDATE", "2018/12/30");

                xmlOut.WriteElementString("GBPMXN", "24.96");
                xmlOut.WriteElementString("GBPMXNDATE", "2018/12/30");

                xmlOut.WriteElementString("GBPUSD", "1.27");
                xmlOut.WriteElementString("GBPUSDDATE", "2018/12/30");

                //=================================================================
                xmlOut.WriteElementString("INRAUD", "0.020");
                xmlOut.WriteElementString("INRAUDDATE", "2018/12/30");

                xmlOut.WriteElementString("INRBRL", "0.055");
                xmlOut.WriteElementString("INRBRLDATE", "2018/12/30");

                xmlOut.WriteElementString("INRCAD", "0.019");
                xmlOut.WriteElementString("INRCADDATE", "2018/12/30");

                xmlOut.WriteElementString("INREUR", "0.013");
                xmlOut.WriteElementString("INREURDATE", "2018/12/30");

                xmlOut.WriteElementString("INRGBP", "0.011");
                xmlOut.WriteElementString("INRGBPDATE", "2018/12/30");

                xmlOut.WriteElementString("INRJPY", "1.58");
                xmlOut.WriteElementString("INRJPYDATE", "2018/12/30");

                xmlOut.WriteElementString("INRMXN", "0.28");
                xmlOut.WriteElementString("INRMXNDATE", "2018/12/30");

                xmlOut.WriteElementString("INRUSD", "0.14");
                xmlOut.WriteElementString("INRUSDDATE", "2018/12/30");


                //=================================================================
                xmlOut.WriteElementString("JPYAUD", "0.013");
                xmlOut.WriteElementString("JPYAUDDATE", "2018/12/30");

                xmlOut.WriteElementString("JPYBRL", "0.035");
                xmlOut.WriteElementString("JPYBRLDATE", "2018/12/30");

                xmlOut.WriteElementString("JPYCAD", "0.012");
                xmlOut.WriteElementString("JPYCADDATE", "2018/12/30");

                xmlOut.WriteElementString("JPYEUR", "0.0079");
                xmlOut.WriteElementString("JPYEURDATE", "2018/12/30");

                xmlOut.WriteElementString("JPYGBP", "0.0071");
                xmlOut.WriteElementString("JPYGBPDATE", "2018/12/30");

                xmlOut.WriteElementString("JPYINR", "0.63");
                xmlOut.WriteElementString("JPYINRDATE", "2018/12/30");

                xmlOut.WriteElementString("JPYMXN", "0.18");
                xmlOut.WriteElementString("JPYMXNDATE", "2018/12/30");

                xmlOut.WriteElementString("JPYUSD", "0.0091");
                xmlOut.WriteElementString("JPYUSDDATE", "2018/12/30");

                //=================================================================
                xmlOut.WriteElementString("MXNAUD", "0.072");
                xmlOut.WriteElementString("MXNAUDDATE", "2018/12/30");

                xmlOut.WriteElementString("MXNBRL", "0.20");
                xmlOut.WriteElementString("MXNBRLDATE", "2018/12/30");

                xmlOut.WriteElementString("MXNCAD", "0.069");
                xmlOut.WriteElementString("MXNCADDATE", "2018/12/30");

                xmlOut.WriteElementString("MXNEUR", "0.044");
                xmlOut.WriteElementString("MXNEURDATE", "2018/12/30");

                xmlOut.WriteElementString("MXNGBP", "0.040");
                xmlOut.WriteElementString("MXNGBPDATE", "2018/12/30");

                xmlOut.WriteElementString("MXNINR", "3.56");
                xmlOut.WriteElementString("MXNINRDATE", "2018/12/30");

                xmlOut.WriteElementString("MXNJPY", "5.61");
                xmlOut.WriteElementString("MXNJPYDATE", "2018/12/30");

                xmlOut.WriteElementString("MXNUSD", "0.051");
                xmlOut.WriteElementString("MXNUSDDATE", "2018/12/30");

                //=================================================================
                xmlOut.WriteElementString("USDAUD", "1.42");
                xmlOut.WriteElementString("USDAUDDATE", "2018/12/30");

                xmlOut.WriteElementString("USDBRL", "3.87");
                xmlOut.WriteElementString("USDBRLDATE", "2018/12/30");

                xmlOut.WriteElementString("USDCAD", "1.36");
                xmlOut.WriteElementString("USDCADDATE", "2018/12/30");

                xmlOut.WriteElementString("USDEUR", "0.87");
                xmlOut.WriteElementString("USDEURDATE", "2018/12/30");

                xmlOut.WriteElementString("USDGBP", "0.79");
                xmlOut.WriteElementString("USDGBPDATE", "2018/12/30");

                xmlOut.WriteElementString("USDINR", "69.93");
                xmlOut.WriteElementString("USDINRDATE", "2018/12/30");

                xmlOut.WriteElementString("USDJPY", "110.32");
                xmlOut.WriteElementString("USDJPYDATE", "2018/12/30");

                xmlOut.WriteElementString("USDMXN", "19.66");
                xmlOut.WriteElementString("USDMXNDATE", "2018/12/30");

                // write the end tag for the root element
                xmlOut.WriteEndElement();
            }
            // close the XmlWriter object
            xmlOut.Close();
        }

        private bool HasAccessToInternet()
        {
            Ping pg = new Ping();
            
            try
            {
                return pg.Send("www.google.com.mx").Status == IPStatus.Success;
            }
            catch
            {
                return false;
            }
        }

    }
}
